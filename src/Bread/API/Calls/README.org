Note: this page is mainly for developers not familiar with Haskell. Developers who are familiar with Haskell may glean more information from the Haddock(umentation), but may still find this page to be useful.

* Bread API calls
Here is a list of all available Bread API calls. They will be defined in an easy to parse table, so hopefully you can generate bindings automatically from this.

** Information
*** Formatting API Calls
API Calls are all formatted in the following manner, and then MsgPack'd
[ String CallName, [ Args ] ]

"Args" will be of varying types, but they will be defined in the table below

*** How API Results are formatted
API Results are all formatted in the following manner, and then MsgPack'd

**** Successful Calls 
[ 1, [ String Effects ], [ Results ] ]
The second element is a list (or array, if you'd like) of Strings which represent the effects that the call had. This is useful, since if you'd like to listen for certain effects on Bread, you can parse these when they come in.

"Results" will be of varying types, but they will be defined below. More complex results will be formatted using JSON, and then MsgPack'd. This allows them to be easily mapped to
"objects" if your language supports them, or be parsed if not.

**** Failed Calls
[ 0, Int FailCode, String ErrorMessage]

** API Call Naming (Crumbs)
Bread API calls may seem confusingly named. This list will help you understand how Bread names its calls, and allow you to quickly learn the calls.

The bits that make up the call names are called "crumbs".

Crumbs that start a request are called "Prefixes".
Crumbs that can further specify a request are called "Specifiers"
Crumbs that represent objects are called "Objects".
Crumbs that can be used as both a "Specifier" and an "Object" are called "Spobjects".

Example:
| Crumb       | Definition     | Associated arguments |
|-------------+----------------+----------------------|
| *Prefixes*  |                |                      |
| g           | get            |                      |
| *Spobjects* |                |                      |
| CB          | current buffer |                      |
| *Objects*   |                |                      |
| Name        | object name    |                      |

Using this, we can understand that "gCBName" will get the name of the current buffer. Likewise, "gCB" will get the current buffer as an object.

*** Crumbs
| *Crumb*      | *Definition*   | *Associated arguments* |
|--------------+----------------+------------------------|
| *Prefixes*   |                |                        |
| g            | get            |                        |
| i            | insert         |                        |
| *Specifiers* |                |                        |
| Ch           | character      | character              |
| @            | at             | position               |
| *Spobjects*  |                |                        |
| B            | buffer         | buffer name            |
| CB           | current buffer |                        |
| *Objects*    |                |                        |
| Name         | name           |                        |
| Options      | options        |                        |
| Mode         | buffer mode    |                        |
| *Special*    |                |                        |
| G            | global         |                        |

**** Examples
 - gCBCh@: get character at position in current buffer
 - iBCh@: insert character at position in specified buffer
 - gCBName: get name of current buffer 
 - gGOptions: get global options
 - gBMode: get mode of specified buffer

** API Calls
*** Editing
| *Call String* | *Args* | *Effects* | *Results*      | *Description*          |
|---------------+--------+-----------+----------------+------------------------|
| *Get Methods* |        |           |                |                        |
|---------------+--------+-----------+----------------+------------------------|
| gCB           | None   | None      | Buffer Object  | get current buffer     |
| gOptions      | None   | None      | Options Object | get Bread options      |
| gCBCursorPos  |        |           |                | get cursor position in |
| g             |        |           |                |                        |
